(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{158:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return a})),t.d(n,"default",(function(){return l}));var r=t(3),o=t(7),i=(t(0),t(345)),s={title:"Running rucio-conveyor-submitter"},c={unversionedId:"bin/rucio-conveyor-submitter",id:"bin/rucio-conveyor-submitter",isDocsHomePage:!1,title:"Running rucio-conveyor-submitter",description:"`",source:"@site/../docs/bin/rucio-conveyor-submitter.md",sourceDirName:"bin",slug:"/bin/rucio-conveyor-submitter",permalink:"/documentation/bin/rucio-conveyor-submitter",version:"current",frontMatter:{title:"Running rucio-conveyor-submitter"}},a=[],u={toc:a};function l(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"usage: rucio-conveyor-submitter [-h] [--run-once]\n                                [--total-threads TOTAL_THREADS] [--bulk BULK]\n                                [--group-bulk GROUP_BULK]\n                                [--group-policy GROUP_POLICY] [--mock]\n                                [--source-strategy SOURCE_STRATEGY]\n                                [--exclude-rses EXCLUDE_RSES]\n                                [--include-rses INCLUDE_RSES]\n                                [--rses RSES [RSES ...]] [--vos VOS [VOS ...]]\n                                [--activities ACTIVITIES [ACTIVITIES ...]]\n                                [--exclude-activities EXCLUDE_ACTIVITIES [EXCLUDE_ACTIVITIES ...]]\n                                [--sleep-time SLEEP_TIME]\n                                [--max-sources MAX_SOURCES]\n                                [--retry-other-fts]\n\nThe Conveyor-Submitter daemon is responsible for managing non-tape file\ntransfers. It prepares transfer jobs and submits them to the transfertool.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-threads TOTAL_THREADS\n                        Concurrency control: total number of threads per\n                        process\n  --bulk BULK           Bulk control: number of requests\n  --group-bulk GROUP_BULK\n                        Group control: number of requests per group\n  --group-policy GROUP_POLICY\n                        Group control: policy used to group. enum{rule, dest,\n                        src_dest, rule_src_dest, activity_dest,\n                        activity_src_dest}\n  --mock                Fake source replicas for requests\n  --source-strategy SOURCE_STRATEGY\n                        Source strategy. Overload the strategy defined in\n                        config DB.\n  --exclude-rses EXCLUDE_RSES\n                        RSE expression to exclude\n  --include-rses INCLUDE_RSES\n                        RSE expression to include\n  --rses RSES [RSES ...]\n                        Explicit list of RSEs to include\n  --vos VOS [VOS ...]   Optional list of VOs to consider. Only used in multi-\n                        VO mode.\n  --activities ACTIVITIES [ACTIVITIES ...]\n                        Explicit list of activities to include\n  --exclude-activities EXCLUDE_ACTIVITIES [EXCLUDE_ACTIVITIES ...]\n                        Explicit list of activities to exclude\n  --sleep-time SLEEP_TIME\n                        Seconds to sleep if few requests\n  --max-sources MAX_SOURCES\n                        Maximum source replicas per FTS job\n  --retry-other-fts     retry on a different FTS\n\nUpload a file and create a replication rule:: $ rucio upload --scope mock\n--rse MOCK --name file filename.txt $ rucio add-rule mock:file 1 MOCK2 $\nrucio-admin rse add-distance MOCK2 MOCK --distance 1 --ranking 1 The rule\nshould replicate the file from RSE MOCK to RSE MOCK2. Therefor a distance\nbetween these RSEs is needed. Check transfer requests for the DID:: $ python\nfrom rucio.db.sqla import session,models\nsession.get_session().query(models.Request).filter_by(scope='mock',\nname='file').first() # {'request_type': TRANSFER, 'state': QUEUED', ...} A\nqueued request was created which can be picked uped by the Conveyor-Submiter\ndaemon. Run the daemon:: $ rucio-conveyor-submitter --run-once Check again the\ntransfer requests for the DID:: $ python from rucio.db.sqla import\nsession,models\nsession.get_session().query(models.Request).filter_by(scope='mock',\nname='file').first() # {'request_type': TRANSFER, 'state': SUBMITTED', ...} A\ntranfer request got created by executing the transfer. Depending on the\ntransfer submission, the request state can be different. In this example the\ntransfer got submitted successfully. When run in multi-VO mode, by default the\ndaemon will run on RSEs from all VOs:: $ rucio-conveyor-submitter --run-once\n2020-07-29 13:51:09,436 5784 INFO This instance will work on VOs: def, abc,\nxyz, 123 2020-07-29 13:51:13,315 5784 INFO RSE selection: automatic for\nrelevant VOs 2020-07-29 13:51:13,316 5784 INFO starting submitter threads By\nusing the ``--vos`` argument only the VO or VOs specified will be affected:: $\nrucio-conveyor-submitter --run-once --vos abc xyz 2020-07-29 13:51:09,436 5784\nINFO This instance will work on VOs: abc, xyz 2020-07-29 13:51:13,315 5784\nINFO RSE selection: automatic for relevant VOs 2020-07-29 13:51:13,316 5784\nINFO starting submitter threads Note that attempting the use the ``--vos``\nargument when in single-VO mode will have no affect:: $ rucio-conveyor-\nsubmitter --run-once --vos abc xyz 2020-07-29 13:39:37,263 5752 INFO RSE\nselection: automatic 2020-07-29 13:39:37,264 5752 INFO starting submitter\nthreads\n")))}l.isMDXComponent=!0},345:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),l=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=l(t),f=r,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return t?o.a.createElement(d,c(c({ref:n},u),{},{components:t})):o.a.createElement(d,c({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=f;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var u=2;u<i;u++)s[u]=t[u];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);